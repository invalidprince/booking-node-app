const http=require('http'),fs=require('fs'),url=require('url');
const PORT=process.env.PORT||5000;
const rooms=[{id:1,name:'Office 1',type:'office'},{id:2,name:'Office 2',type:'office'},{id:3,name:'Office 3',type:'office'},{id:4,name:'Office 4',type:'office'},{id:5,name:'Conference A',type:'conference'},{id:6,name:'Conference B',type:'conference'}];
let bookings=[];
function serveFile(res,filePath,contentType){fs.readFile(filePath,(err,data)=>{if(err){res.writeHead(404);res.end('Not found');}else{res.writeHead(200,{'Content-Type':contentType});res.end(data);}});}
function hasConflict(nb){const start=new Date(nb.start).getTime();const end=new Date(nb.end).getTime();return bookings.some(b=>{if(b.room_id!==nb.room_id)return false;const es=new Date(b.start).getTime();const ee=new Date(b.end).getTime();return ee>start&&es<end;});}
const server=http.createServer((req,res)=>{const parsed=url.parse(req.url,true);
if(req.method==='GET'&&parsed.pathname==='/'){return serveFile(res,__dirname+'/public/index.html','text/html');}
if(req.method==='GET'&&parsed.pathname==='/api/rooms'){res.writeHead(200,{'Content-Type':'application/json'});res.end(JSON.stringify(rooms));return;}
if(req.method==='GET'&&parsed.pathname==='/api/bookings'){res.writeHead(200,{'Content-Type':'application/json'});res.end(JSON.stringify(bookings));return;}
if(req.method==='POST'&&parsed.pathname==='/api/bookings'){let body='';req.on('data',chunk=>{body+=chunk;});req.on('end',()=>{try{const data=JSON.parse(body);if(!data.room_id||!data.date||!data.start_time||!data.end_time||!data.name||!data.email){res.writeHead(400);res.end('Missing fields');return;}const startDateTime=new Date(`${data.date}T${data.start_time}`);const endDateTime=new Date(`${data.date}T${data.end_time}`);if(isNaN(startDateTime)||isNaN(endDateTime)){res.writeHead(400);res.end('Invalid date or time');return;}if(endDateTime<=startDateTime){res.writeHead(400);res.end('End time must be after start time');return;}const newBooking={id:bookings.length+1,room_id:data.room_id,start:startDateTime.toISOString(),end:endDateTime.toISOString(),name:data.name,email:data.email};if(hasConflict(newBooking)){res.writeHead(409);res.end('Booking conflict');return;}bookings.push(newBooking);res.writeHead(200,{'Content-Type':'application/json'});res.end(JSON.stringify({success:true}));}catch(e){res.writeHead(400);res.end('Invalid JSON');}});return;}
if(req.method==='GET'&&parsed.pathname.startsWith('/public/')){const filePath=__dirname+parsed.pathname;const ext=filePath.split('.').pop();let type='text/plain';if(ext==='js')type='application/javascript';if(ext==='css')type='text/css';if(ext==='html')type='text/html';return serveFile(res,filePath,type);}
res.writeHead(404);res.end('Not found');});
server.listen(PORT,()=>{console.log(`Server running at http://localhost:${PORT}`);});
